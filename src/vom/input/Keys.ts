

export class Keys
{
    public static BACKSPACE = 8;
    public static TAB = 9;
    public static ENTER = 13;
    public static SHIFT = 16;
    public static CTRL = 17;
    public static ALT = 18;
    public static PAUSE = 19;
    public static CAPS_LOCK = 20;
    public static ESCAPE = 27;
    public static SPACE = 32;
    public static PAGE_UP = 33;
    public static PAGE_DOWN = 34;
    public static END = 35;
    public static HOME = 36;
    public static LEFT_ARROW = 37;
    public static UP_ARROW = 38;
    public static RIGHT_ARROW = 39;
    public static DOWN_ARROW = 40;
    public static INSERT = 45;
    public static DELETE = 46;
    public static KEY_0 = 48;
    public static KEY_1 = 49;
    public static KEY_2 = 50;
    public static KEY_3 = 51;
    public static KEY_4 = 52;
    public static KEY_5 = 53;
    public static KEY_6 = 54;
    public static KEY_7 = 55;
    public static KEY_8 = 56;
    public static KEY_9 = 57;
    public static KEY_A = 65;
    public static KEY_B = 66;
    public static KEY_C = 67;
    public static KEY_D = 68;
    public static KEY_E = 69;
    public static KEY_F = 70;
    public static KEY_G = 71;
    public static KEY_H = 72;
    public static KEY_I = 73;
    public static KEY_J = 74;
    public static KEY_K = 75;
    public static KEY_L = 76;
    public static KEY_M = 77;
    public static KEY_N = 78;
    public static KEY_O = 79;
    public static KEY_P = 80;
    public static KEY_Q = 81;
    public static KEY_R = 82;
    public static KEY_S = 83;
    public static KEY_T = 84;
    public static KEY_U = 85;
    public static KEY_V = 86;
    public static KEY_W = 87;
    public static KEY_X = 88;
    public static KEY_Y = 89;
    public static KEY_Z = 90;
    public static LEFT_META = 91;
    public static RIGHT_META = 92;
    public static SELECT = 93;
    public static NUMPAD_0 = 96;
    public static NUMPAD_1 = 97;
    public static NUMPAD_2 = 98;
    public static NUMPAD_3 = 99;
    public static NUMPAD_4 = 100;
    public static NUMPAD_5 = 101;
    public static NUMPAD_6 = 102;
    public static NUMPAD_7 = 103;
    public static NUMPAD_8 = 104;
    public static NUMPAD_9 = 105;
    public static MULTIPLY = 106;
    public static ADD = 107;
    public static SUBTRACT = 109;
    public static DECIMAL = 110;
    public static DIVIDE = 111;
    public static F1 = 112;
    public static F2 = 113;
    public static F3 = 114;
    public static F4 = 115;
    public static F5 = 116;
    public static F6 = 117;
    public static F7 = 118;
    public static F8 = 119;
    public static F9 = 120;
    public static F10 = 121;
    public static F11 = 122;
    public static F12 = 123;
    public static NUM_LOCK = 144;
    public static SCROLL_LOCK = 145;
    public static SEMICOLON = 186;
    public static EQUALS = 187;
    public static COMMA = 188;
    public static DASH = 189;
    public static PERIOD = 190;
    public static FORWARD_SLASH = 191;
    public static GRAVE_ACCENT = 192;
    public static OPEN_BRACKET = 219;
    public static BACK_SLASH = 220;
    public static CLOSE_BRACKET = 221;
    public static SINGLE_QUOTE = 222;
    public static GRADE_QUOTE = 223;

    public static parse(input:string, thrownOnFail:boolean = true):number
    {
        switch (input.trim())
        {
            case 'BACKSPACE': return Keys.BACKSPACE;
            case 'TAB': return Keys.TAB;
            case 'ENTER': return Keys.ENTER;
            case 'SHIFT': return Keys.SHIFT;
            case 'CTRL': return Keys.CTRL;
            case 'ALT': return Keys.ALT;
            case 'PAUSE': return Keys.PAUSE;
            case 'CAPS_LOCK': return Keys.CAPS_LOCK;
            case 'ESCAPE': return Keys.ESCAPE;
            case 'SPACE': return Keys.SPACE;
            case 'PAGE_UP': return Keys.PAGE_UP;
            case 'PAGE_DOWN': return Keys.PAGE_DOWN;
            case 'END': return Keys.END;
            case 'HOME': return Keys.HOME;
            case 'LEFT_ARROW': return Keys.LEFT_ARROW;
            case 'UP_ARROW': return Keys.UP_ARROW;
            case 'RIGHT_ARROW': return Keys.RIGHT_ARROW;
            case 'DOWN_ARROW': return Keys.DOWN_ARROW;
            case 'INSERT': return Keys.INSERT;
            case 'DELETE': return Keys.DELETE;
            case 'KEY_0': return Keys.KEY_0;
            case 'KEY_1': return Keys.KEY_1;
            case 'KEY_2': return Keys.KEY_2;
            case 'KEY_3': return Keys.KEY_3;
            case 'KEY_4': return Keys.KEY_4;
            case 'KEY_5': return Keys.KEY_5;
            case 'KEY_6': return Keys.KEY_6;
            case 'KEY_7': return Keys.KEY_7;
            case 'KEY_8': return Keys.KEY_8;
            case 'KEY_9': return Keys.KEY_9;
            case 'KEY_A': return Keys.KEY_A;
            case 'KEY_B': return Keys.KEY_B;
            case 'KEY_C': return Keys.KEY_C;
            case 'KEY_D': return Keys.KEY_D;
            case 'KEY_E': return Keys.KEY_E;
            case 'KEY_F': return Keys.KEY_F;
            case 'KEY_G': return Keys.KEY_G;
            case 'KEY_H': return Keys.KEY_H;
            case 'KEY_I': return Keys.KEY_I;
            case 'KEY_J': return Keys.KEY_J;
            case 'KEY_K': return Keys.KEY_K;
            case 'KEY_L': return Keys.KEY_L;
            case 'KEY_M': return Keys.KEY_M;
            case 'KEY_N': return Keys.KEY_N;
            case 'KEY_O': return Keys.KEY_O;
            case 'KEY_P': return Keys.KEY_P;
            case 'KEY_Q': return Keys.KEY_Q;
            case 'KEY_R': return Keys.KEY_R;
            case 'KEY_S': return Keys.KEY_S;
            case 'KEY_T': return Keys.KEY_T;
            case 'KEY_U': return Keys.KEY_U;
            case 'KEY_V': return Keys.KEY_V;
            case 'KEY_W': return Keys.KEY_W;
            case 'KEY_X': return Keys.KEY_X;
            case 'KEY_Y': return Keys.KEY_Y;
            case 'KEY_Z': return Keys.KEY_Z;
            case '0': return Keys.KEY_0;
            case '1': return Keys.KEY_1;
            case '2': return Keys.KEY_2;
            case '3': return Keys.KEY_3;
            case '4': return Keys.KEY_4;
            case '5': return Keys.KEY_5;
            case '6': return Keys.KEY_6;
            case '7': return Keys.KEY_7;
            case '8': return Keys.KEY_8;
            case '9': return Keys.KEY_9;
            case 'A': return Keys.KEY_A;
            case 'B': return Keys.KEY_B;
            case 'C': return Keys.KEY_C;
            case 'D': return Keys.KEY_D;
            case 'E': return Keys.KEY_E;
            case 'F': return Keys.KEY_F;
            case 'G': return Keys.KEY_G;
            case 'H': return Keys.KEY_H;
            case 'I': return Keys.KEY_I;
            case 'J': return Keys.KEY_J;
            case 'K': return Keys.KEY_K;
            case 'L': return Keys.KEY_L;
            case 'M': return Keys.KEY_M;
            case 'N': return Keys.KEY_N;
            case 'O': return Keys.KEY_O;
            case 'P': return Keys.KEY_P;
            case 'Q': return Keys.KEY_Q;
            case 'R': return Keys.KEY_R;
            case 'S': return Keys.KEY_S;
            case 'T': return Keys.KEY_T;
            case 'U': return Keys.KEY_U;
            case 'V': return Keys.KEY_V;
            case 'W': return Keys.KEY_W;
            case 'X': return Keys.KEY_X;
            case 'Y': return Keys.KEY_Y;
            case 'Z': return Keys.KEY_Z;
            case 'LEFT_META': return Keys.LEFT_META;
            case 'RIGHT_META': return Keys.RIGHT_META;
            case 'SELECT': return Keys.SELECT;
            case 'NUMPAD_0': return Keys.NUMPAD_0;
            case 'NUMPAD_1': return Keys.NUMPAD_1;
            case 'NUMPAD_2': return Keys.NUMPAD_2;
            case 'NUMPAD_3': return Keys.NUMPAD_3;
            case 'NUMPAD_4': return Keys.NUMPAD_4;
            case 'NUMPAD_5': return Keys.NUMPAD_5;
            case 'NUMPAD_6': return Keys.NUMPAD_6;
            case 'NUMPAD_7': return Keys.NUMPAD_7;
            case 'NUMPAD_8': return Keys.NUMPAD_8;
            case 'NUMPAD_9': return Keys.NUMPAD_9;
            case 'MULTIPLY': return Keys.MULTIPLY;
            case 'ADD': return Keys.ADD;
            case 'SUBTRACT': return Keys.SUBTRACT;
            case 'DECIMAL': return Keys.DECIMAL;
            case 'DIVIDE': return Keys.DIVIDE;
            case 'F1': return Keys.F1;
            case 'F2': return Keys.F2;
            case 'F3': return Keys.F3;
            case 'F4': return Keys.F4;
            case 'F5': return Keys.F5;
            case 'F6': return Keys.F6;
            case 'F7': return Keys.F7;
            case 'F8': return Keys.F8;
            case 'F9': return Keys.F9;
            case 'F10': return Keys.F10;
            case 'F11': return Keys.F11;
            case 'F12': return Keys.F12;
            case 'NUM_LOCK': return Keys.NUM_LOCK;
            case 'SCROLL_LOCK': return Keys.SCROLL_LOCK;
            case 'SEMICOLON': return Keys.SEMICOLON;
            case 'EQUALS': return Keys.EQUALS;
            case 'COMMA': return Keys.COMMA;
            case 'DASH': return Keys.DASH;
            case 'PERIOD': return Keys.PERIOD;
            case 'FORWARD_SLASH': return Keys.FORWARD_SLASH;
            case 'GRAVE_ACCENT': return Keys.GRAVE_ACCENT;
            case 'OPEN_BRACKET': return Keys.OPEN_BRACKET;
            case 'BACK_SLASH': return Keys.BACK_SLASH;
            case 'CLOSE_BRACKET': return Keys.CLOSE_BRACKET;
            case 'SINGLE_QUOTE': return Keys.SINGLE_QUOTE;
            default:
            if (thrownOnFail)
                throw 'Invalid key: ' + input;
            else
                return null;
        }
    }

    public static parseExpression(input:string):number[]
    {
        return input
            .split(/[\s\-\+]+/)
            .map(x => Keys.parse(x));
    }
}