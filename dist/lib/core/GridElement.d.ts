import { SimpleEventEmitter } from '../base/SimpleEventEmitter';
import { Padding } from '../geom/Padding';
import { Point } from '../geom/Point';
import { GridModel } from '../model/GridModel';
import { Surface } from '../vom/Surface';
import { CellVisual } from './CellVisual';
import { GridExtension } from './Extensibility';
import { GridKernel } from './GridKernel';
import { GridLayout } from './GridLayout';
import { GridView } from './GridView';
export declare class GridElement extends SimpleEventEmitter {
    private cameraBuffers;
    private autoBufferUpdateEnabled;
    private readonly internal;
    static create(container: HTMLElement, initialModel?: GridModel): GridElement;
    static createDefault(container: HTMLElement, initialModel?: GridModel): GridElement;
    private constructor();
    model: GridModel;
    freezeMargin: Point;
    padding: Padding;
    scroll: Point;
    readonly container: HTMLElement;
    readonly kernel: GridKernel;
    readonly layout: GridLayout;
    readonly surface: Surface;
    readonly view: GridView;
    extend(ext: GridExtension): GridElement;
    exec(command: string, ...args: any[]): void;
    get(variable: string): any;
    set(variable: string, value: any): void;
    mergeInterface(): GridElement;
    focus(): void;
    forceUpdate(): void;
    private initCameras();
    private initSurface();
    private updateCameras();
    private updateSurface();
    private allocateBuffer(camera);
    private destroyBuffer(camera);
    private updateLayout();
    private doCreateVisual(cell, rect);
    private doUpdateVisual(visual, cell, rect);
    private doDestroyVisual(visual);
    private notifyChange(property);
}
export declare class CameraBufferEntry {
    cellId: string;
    visual: CellVisual;
    nonce: number;
    cycle: number;
    constructor(cellId: string, visual: CellVisual, nonce?: number, cycle?: number);
}
